using Local_Rag_Web.Interfaces;
using Local_Rag_Web.Models;
using System.Text;

namespace Local_Rag_Web.Services
{

    /// <summary>
    /// Service for generating professional reports from search results.
    /// 
    /// This transforms raw search data into well-formatted, readable reports
    /// that users can save, share, and reference. Think of it as creating
    /// a research memo that includes the answer, sources, and metadata.
    /// </summary>
    public class ReportGenerationService : IReportGenerationService
    {
        public async Task<string> GenerateMarkdownReportAsync(SearchReport report)
        {
            var sb = new StringBuilder();

            // Title and metadata
            sb.AppendLine("# Search Report");
            sb.AppendLine();
            sb.AppendLine($"**Query:** {report.Query}");
            sb.AppendLine($"**Date:** {report.SearchDate:yyyy-MM-dd HH:mm:ss}");
            sb.AppendLine($"**Sources Found:** {report.TotalSourcesFound}");
            sb.AppendLine($"**Average Relevance:** {report.AverageSimilarityScore:P1}");
            sb.AppendLine();
            sb.AppendLine("---");
            sb.AppendLine();

            // Generated answer
            sb.AppendLine("## Answer");
            sb.AppendLine();
            sb.AppendLine(report.GeneratedAnswer);
            sb.AppendLine();
            sb.AppendLine("---");
            sb.AppendLine();

            // Source references
            sb.AppendLine("## Sources");
            sb.AppendLine();

            if (report.Sources != null && report.Sources.Any())
            {
                for (int i = 0; i < report.Sources.Count; i++)
                {
                    var source = report.Sources[i];
                    sb.AppendLine($"### Source {i + 1}: {source.FileName}");
                    sb.AppendLine();
                    sb.AppendLine($"**Location:** `{source.FilePath}`");
                    sb.AppendLine($"**Relevance Score:** {source.SimilarityScore:P1}");
                    sb.AppendLine($"**Section:** Chunk {source.ChunkIndex + 1}");
                    sb.AppendLine();
                    sb.AppendLine("**Relevant Excerpt:**");
                    sb.AppendLine("```");
                    sb.AppendLine(TruncateText(source.RelevantExcerpt, 500));
                    sb.AppendLine("```");
                    sb.AppendLine();
                }
            }
            else
            {
                sb.AppendLine("*No sources found matching the query.*");
            }

            sb.AppendLine("---");
            sb.AppendLine();
            sb.AppendLine("*Report generated by Local RAG Document Search System*");

            return await Task.FromResult(sb.ToString());
        }

        public async Task<string> GenerateHtmlReportAsync(SearchReport report)
        {
            var sb = new StringBuilder();

            // HTML structure with embedded CSS
            sb.AppendLine("<!DOCTYPE html>");
            sb.AppendLine("<html lang=\"en\">");
            sb.AppendLine("<head>");
            sb.AppendLine("    <meta charset=\"UTF-8\">");
            sb.AppendLine("    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">");
            sb.AppendLine("    <title>Search Report</title>");
            sb.AppendLine("    <style>");
            sb.AppendLine("        body { font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; max-width: 1200px; margin: 0 auto; padding: 20px; line-height: 1.6; color: #333; }");
            sb.AppendLine("        .header { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 30px; border-radius: 10px; margin-bottom: 30px; }");
            sb.AppendLine("        .header h1 { margin: 0 0 15px 0; }");
            sb.AppendLine("        .metadata { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px; margin-top: 20px; }");
            sb.AppendLine("        .metadata-item { background: rgba(255,255,255,0.2); padding: 10px; border-radius: 5px; }");
            sb.AppendLine("        .metadata-label { font-size: 0.85em; opacity: 0.9; }");
            sb.AppendLine("        .metadata-value { font-size: 1.2em; font-weight: bold; }");
            sb.AppendLine("        .answer-section { background: #f8f9fa; padding: 25px; border-radius: 10px; margin-bottom: 30px; border-left: 4px solid #667eea; }");
            sb.AppendLine("        .answer-section h2 { margin-top: 0; color: #667eea; }");
            sb.AppendLine("        .sources { margin-top: 30px; }");
            sb.AppendLine("        .source-card { background: white; border: 1px solid #e0e0e0; border-radius: 8px; padding: 20px; margin-bottom: 20px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }");
            sb.AppendLine("        .source-header { display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px; padding-bottom: 15px; border-bottom: 2px solid #f0f0f0; }");
            sb.AppendLine("        .source-title { font-size: 1.2em; font-weight: bold; color: #333; }");
            sb.AppendLine("        .relevance-badge { background: #667eea; color: white; padding: 5px 15px; border-radius: 20px; font-size: 0.9em; }");
            sb.AppendLine("        .source-details { color: #666; font-size: 0.9em; margin-bottom: 15px; }");
            sb.AppendLine("        .excerpt { background: #f5f5f5; padding: 15px; border-radius: 5px; font-family: 'Courier New', monospace; font-size: 0.9em; white-space: pre-wrap; }");
            sb.AppendLine("        .footer { text-align: center; margin-top: 40px; padding-top: 20px; border-top: 1px solid #e0e0e0; color: #999; }");
            sb.AppendLine("    </style>");
            sb.AppendLine("</head>");
            sb.AppendLine("<body>");

            // Header with metadata
            sb.AppendLine("    <div class=\"header\">");
            sb.AppendLine("        <h1>🔍 Search Report</h1>");
            sb.AppendLine($"        <p><strong>Query:</strong> {EscapeHtml(report.Query)}</p>");
            sb.AppendLine("        <div class=\"metadata\">");
            sb.AppendLine("            <div class=\"metadata-item\">");
            sb.AppendLine("                <div class=\"metadata-label\">Date & Time</div>");
            sb.AppendLine($"                <div class=\"metadata-value\">{report.SearchDate:yyyy-MM-dd HH:mm}</div>");
            sb.AppendLine("            </div>");
            sb.AppendLine("            <div class=\"metadata-item\">");
            sb.AppendLine("                <div class=\"metadata-label\">Sources Found</div>");
            sb.AppendLine($"                <div class=\"metadata-value\">{report.TotalSourcesFound}</div>");
            sb.AppendLine("            </div>");
            sb.AppendLine("            <div class=\"metadata-item\">");
            sb.AppendLine("                <div class=\"metadata-label\">Avg Relevance</div>");
            sb.AppendLine($"                <div class=\"metadata-value\">{report.AverageSimilarityScore:P1}</div>");
            sb.AppendLine("            </div>");
            sb.AppendLine("        </div>");
            sb.AppendLine("    </div>");

            // Answer section
            sb.AppendLine("    <div class=\"answer-section\">");
            sb.AppendLine("        <h2>📝 Answer</h2>");
            sb.AppendLine($"        <p>{EscapeHtml(report.GeneratedAnswer)}</p>");
            sb.AppendLine("    </div>");

            // Sources section
            sb.AppendLine("    <div class=\"sources\">");
            sb.AppendLine("        <h2>📚 Sources</h2>");

            if (report.Sources != null && report.Sources.Any())
            {
                for (int i = 0; i < report.Sources.Count; i++)
                {
                    var source = report.Sources[i];
                    sb.AppendLine("        <div class=\"source-card\">");
                    sb.AppendLine("            <div class=\"source-header\">");
                    sb.AppendLine($"                <div class=\"source-title\">{i + 1}. {EscapeHtml(source.FileName)}</div>");
                    sb.AppendLine($"                <div class=\"relevance-badge\">{source.SimilarityScore:P1} Match</div>");
                    sb.AppendLine("            </div>");
                    sb.AppendLine("            <div class=\"source-details\">");
                    sb.AppendLine($"                📁 <strong>Location:</strong> {EscapeHtml(source.FilePath)}<br>");
                    sb.AppendLine($"                📄 <strong>Section:</strong> Chunk {source.ChunkIndex + 1}");
                    sb.AppendLine("            </div>");
                    sb.AppendLine("            <div class=\"excerpt\">");
                    sb.AppendLine(EscapeHtml(TruncateText(source.RelevantExcerpt, 500)));
                    sb.AppendLine("            </div>");
                    sb.AppendLine("        </div>");
                }
            }
            else
            {
                sb.AppendLine("        <p><em>No sources found matching the query.</em></p>");
            }

            sb.AppendLine("    </div>");

            // Footer
            sb.AppendLine("    <div class=\"footer\">");
            sb.AppendLine("        <p>Report generated by Local RAG Document Search System</p>");
            sb.AppendLine("    </div>");

            sb.AppendLine("</body>");
            sb.AppendLine("</html>");

            return await Task.FromResult(sb.ToString());
        }

        public async Task<string> GeneratePlainTextReportAsync(SearchReport report)
        {
            var sb = new StringBuilder();

            // Simple text header
            sb.AppendLine("=".PadLeft(80, '='));
            sb.AppendLine("SEARCH REPORT");
            sb.AppendLine("=".PadLeft(80, '='));
            sb.AppendLine();
            sb.AppendLine($"Query: {report.Query}");
            sb.AppendLine($"Date: {report.SearchDate:yyyy-MM-dd HH:mm:ss}");
            sb.AppendLine($"Sources Found: {report.TotalSourcesFound}");
            sb.AppendLine($"Average Relevance: {report.AverageSimilarityScore:P1}");
            sb.AppendLine();
            sb.AppendLine("-".PadLeft(80, '-'));
            sb.AppendLine();

            // Answer
            sb.AppendLine("ANSWER:");
            sb.AppendLine();
            sb.AppendLine(WrapText(report.GeneratedAnswer, 80));
            sb.AppendLine();
            sb.AppendLine("-".PadLeft(80, '-'));
            sb.AppendLine();

            // Sources
            sb.AppendLine("SOURCES:");
            sb.AppendLine();

            if (report.Sources != null && report.Sources.Any())
            {
                for (int i = 0; i < report.Sources.Count; i++)
                {
                    var source = report.Sources[i];
                    sb.AppendLine($"[{i + 1}] {source.FileName}");
                    sb.AppendLine($"    Location: {source.FilePath}");
                    sb.AppendLine($"    Relevance: {source.SimilarityScore:P1}");
                    sb.AppendLine($"    Section: Chunk {source.ChunkIndex + 1}");
                    sb.AppendLine();
                    sb.AppendLine("    Excerpt:");
                    var wrappedExcerpt = WrapText(TruncateText(source.RelevantExcerpt, 500), 76);
                    foreach (var line in wrappedExcerpt.Split('\n'))
                    {
                        sb.AppendLine($"    {line}");
                    }
                    sb.AppendLine();
                }
            }
            else
            {
                sb.AppendLine("No sources found matching the query.");
            }

            sb.AppendLine("=".PadLeft(80, '='));

            return await Task.FromResult(sb.ToString());
        }

        /// <summary>
        /// Truncates text to a maximum length while trying to preserve complete sentences.
        /// </summary>
        private string TruncateText(string text, int maxLength)
        {
            if (string.IsNullOrEmpty(text) || text.Length <= maxLength)
                return text;

            // Try to find the last sentence end before maxLength
            var truncated = text.Substring(0, maxLength);
            var lastPeriod = truncated.LastIndexOfAny(new[] { '.', '!', '?' });

            if (lastPeriod > maxLength * 0.7) // At least 70% of maxLength
            {
                return text.Substring(0, lastPeriod + 1);
            }

            return truncated + "...";
        }

        /// <summary>
        /// Wraps text to fit within a specified line width.
        /// </summary>
        private string WrapText(string text, int lineWidth)
        {
            if (string.IsNullOrEmpty(text))
                return text;

            var words = text.Split(' ');
            var lines = new List<string>();
            var currentLine = new StringBuilder();

            foreach (var word in words)
            {
                if (currentLine.Length + word.Length + 1 > lineWidth)
                {
                    if (currentLine.Length > 0)
                    {
                        lines.Add(currentLine.ToString());
                        currentLine.Clear();
                    }
                }

                if (currentLine.Length > 0)
                    currentLine.Append(' ');
                currentLine.Append(word);
            }

            if (currentLine.Length > 0)
                lines.Add(currentLine.ToString());

            return string.Join("\n", lines);
        }

        /// <summary>
        /// Escapes HTML special characters to prevent XSS and formatting issues.
        /// </summary>
        private string EscapeHtml(string text)
        {
            if (string.IsNullOrEmpty(text))
                return text;

            return text
                .Replace("&", "&amp;")
                .Replace("<", "&lt;")
                .Replace(">", "&gt;")
                .Replace("\"", "&quot;")
                .Replace("'", "&#39;");
        }
    }
}
